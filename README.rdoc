= hessian2

json encode fast, hessian write small.

hessian2 implements hessian 2.0 protocol. check {web services protocol}[http://hessian.caucho.com/doc/hessian-ws.html] and {serialization protocol}[http://hessian.caucho.com/doc/hessian-serialization.html].

== comparing

  yajl-ruby: json is readable and popular.
  
  msgpack: pack/unpack fast.
  
  hessian2: referencable, serialize following objects only values, therefore smallest, and saving transfer.

== client

  require 'hessian2'
  
  url = 'http://127.0.0.1:9292/monkey'
  client = Hessian2::Client.new(url)
  
  # call remote function: send_monkey(monkey)
  client.send_monkey(monkey)

== install

  gem install hessian2

== type wrapper
  
  binstr = IO.binread(File.expand_path("../Lighthouse.jpg", __FILE__))

  # send a file as binary
  client.send_file(Hessian2::TypeWrapper.new('B', binstr))
  
  # send a string as long
  c1.send_long(Hessian2::TypeWrapper.new('L', '-0x8_000_000_000_000_000'))

== class wrapper
  
  # send a hash as a monkey
  hash = {name: '阿门', age: 7}
  client.send_monkey(Hessian2::ClassWrapper.new('Monkey', hash))

  # send a batch of monkeys
  arr = [{name: '阿门', age: 7}, {name: '大鸡', age: 6}]
  client.send_monkeys(arr.map{|hash| Hessian2::ClassWrapper.new('Monkey', hash)})

== service

  class MonkeyService
    extend Hessian2::Handler

    def self.send_monkey(monkey)
    # ...
  end
  
  # a example, with sinatra
  post '/monkey' do
    MonkeyService.handle(request.body.read)
  end

== test
  
  cd test/

  # start a service
  rackup -E production

  # test parser
  ruby ./get.rb

  # test writer
  ruby ./set.rb

== todo

supports packet+ and envelope+

rsa aes encryption

== authors

* {Takafan}[http://hululuu.com]

== license

MIT
